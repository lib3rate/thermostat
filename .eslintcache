[{"/home/liberate/projects/thermostat/src/index.js":"1","/home/liberate/projects/thermostat/src/App.js":"2","/home/liberate/projects/thermostat/src/serviceWorker.js":"3","/home/liberate/projects/thermostat/src/app/store.js":"4","/home/liberate/projects/thermostat/src/helpers/helpers.js":"5","/home/liberate/projects/thermostat/src/components/Navigation/Navigation.js":"6","/home/liberate/projects/thermostat/src/components/Navigation/navigationSlice.js":"7","/home/liberate/projects/thermostat/src/components/Navigation/NavigationItem.js":"8","/home/liberate/projects/thermostat/src/components/Buttons/ModeButton.js":"9","/home/liberate/projects/thermostat/src/components/Thermostat/Thermostat.js":"10","/home/liberate/projects/thermostat/src/components/Thermostat/thermostatSlice.js":"11","/home/liberate/projects/thermostat/src/components/Temperature/Temperature.js":"12","/home/liberate/projects/thermostat/src/components/Alert/Alert.js":"13","/home/liberate/projects/thermostat/src/components/Alert/alertSlice.js":"14"},{"size":644,"mtime":1612233743890,"results":"15","hashOfConfig":"16"},{"size":304,"mtime":1612509249720,"results":"17","hashOfConfig":"16"},{"size":5141,"mtime":1612233743890,"results":"18","hashOfConfig":"16"},{"size":420,"mtime":1612509249720,"results":"19","hashOfConfig":"16"},{"size":2809,"mtime":1612509249720,"results":"20","hashOfConfig":"16"},{"size":4445,"mtime":1612580591110,"results":"21","hashOfConfig":"16"},{"size":492,"mtime":1612329872290,"results":"22","hashOfConfig":"16"},{"size":1183,"mtime":1612579844050,"results":"23","hashOfConfig":"16"},{"size":4021,"mtime":1612509522090,"results":"24","hashOfConfig":"16"},{"size":3588,"mtime":1612509249720,"results":"25","hashOfConfig":"16"},{"size":2484,"mtime":1612509860550,"results":"26","hashOfConfig":"16"},{"size":4525,"mtime":1612509249720,"results":"27","hashOfConfig":"16"},{"size":971,"mtime":1612509639540,"results":"28","hashOfConfig":"16"},{"size":622,"mtime":1612509249720,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"20lrqr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/liberate/projects/thermostat/src/index.js",[],["61","62"],"/home/liberate/projects/thermostat/src/App.js",[],"/home/liberate/projects/thermostat/src/serviceWorker.js",[],"/home/liberate/projects/thermostat/src/app/store.js",[],"/home/liberate/projects/thermostat/src/helpers/helpers.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/Navigation.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/navigationSlice.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/NavigationItem.js",["63"],"/home/liberate/projects/thermostat/src/components/Buttons/ModeButton.js",[],"/home/liberate/projects/thermostat/src/components/Thermostat/Thermostat.js",["64","65"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ModeButton from \"../Buttons/ModeButton\";\r\nimport Temperature from \"../Temperature/Temperature\";\r\n\r\nimport {\r\n  registerThermostat,\r\n  setCurrentIndoorTemperature,\r\n  setCurrentOutdoorTemperature,\r\n  selectCurrentUnit,\r\n  selectId,\r\n  selectMode,\r\n  // selectCurrentIndoorTemperature,\r\n  // selectCurrentOutdoorTemperature,\r\n  // selectDesiredTemperature\r\n} from './thermostatSlice';\r\n\r\nimport { register, fetchTemperature } from \"../../helpers/helpers\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modeInterface: {\r\n    display: 'flex'\r\n  },\r\n  modeButtons: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    width: '50%'\r\n  },\r\n}));\r\n\r\nexport default function Thermostat() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const localStorageId = localStorage.getItem('id');\r\n  const thermostatId = useSelector(selectId);\r\n\r\n  useEffect(async () => {\r\n    // Register thermostat if there is no thermostat id stored locally\r\n    if (!localStorageId) {\r\n      const response = await register();\r\n      const id = response.uid_hash;\r\n\r\n      dispatch(registerThermostat(id));\r\n      localStorage.setItem('id', id);\r\n    }\r\n\r\n    // Save the thermostat id in the state if it is stored locally but not in the state\r\n    if (!thermostatId) {\r\n      dispatch(registerThermostat(localStorageId))\r\n    };\r\n\r\n    const averageIndoorTemperature = await fetchTemperature('temperature-1');\r\n    dispatch(setCurrentIndoorTemperature(averageIndoorTemperature));\r\n\r\n    const averageOutdoorTemperature = await fetchTemperature('outdoor-1');\r\n    dispatch(setCurrentOutdoorTemperature(averageOutdoorTemperature));\r\n  }, []);\r\n\r\n  const currentUnit = useSelector(selectCurrentUnit);\r\n  const currentMode = useSelector(selectMode);\r\n\r\n  function isTurnedOff() {\r\n    return currentMode === 'Turn off' ? true : false;\r\n  };\r\n\r\n  const modes = ['Auto', 'Cooling', 'Heating', 'Ventilation'];\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {currentUnit} - Thermostat\r\n      </div>\r\n      <ModeButton\r\n        mode='Turn off'\r\n        isDisabled={isTurnedOff()}\r\n      />\r\n      <div className={classes.modeInterface}>\r\n        <Temperature />\r\n        <div className={classes.modeButtons}>\r\n          Thermostat mode\r\n          {modes.map(mode => (\r\n            <ModeButton\r\n              key={mode}\r\n              mode={mode}\r\n              isDisabled={false}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","/home/liberate/projects/thermostat/src/components/Thermostat/thermostatSlice.js",[],"/home/liberate/projects/thermostat/src/components/Temperature/Temperature.js",["66"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\nimport {\r\n  selectCurrentIndoorTemperature,\r\n  increaseDesiredTemperature,\r\n  decreaseDesiredTemperature,\r\n} from '../Thermostat/thermostatSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  temperatureContainer: {\r\n    width: '50%',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  temperature: {\r\n    margin: '1rem',\r\n    fontSize: '4rem'\r\n  }\r\n}));\r\n\r\nexport default function Temperature(props) {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const currentIndoorTemperature = useSelector(selectCurrentIndoorTemperature);\r\n\r\n  return (\r\n    <div className={classes.temperatureContainer}>\r\n      <Fab\r\n        size=\"small\"\r\n        color=\"primary\"\r\n        aria-label=\"increase\"\r\n        onClick={() => dispatch(increaseDesiredTemperature())}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n      <span className={classes.temperature}>{currentIndoorTemperature}Â°</span>\r\n      <Fab\r\n        size=\"small\"\r\n        color=\"primary\"\r\n        aria-label=\"decrease\"\r\n        onClick={()=>dispatch(decreaseDesiredTemperature())}\r\n      >\r\n        <RemoveIcon />\r\n      </Fab>\r\n    </div>\r\n  );\r\n}","/home/liberate/projects/thermostat/src/components/Alert/Alert.js",[],"/home/liberate/projects/thermostat/src/components/Alert/alertSlice.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":5,"column":22,"nodeType":"73","messageId":"74","endLine":5,"endColumn":30},{"ruleId":"75","severity":1,"message":"76","line":43,"column":13,"nodeType":"77","endLine":87,"endColumn":4},{"ruleId":"75","severity":1,"message":"78","line":87,"column":6,"nodeType":"79","endLine":87,"endColumn":8,"suggestions":"80"},{"ruleId":"71","severity":1,"message":"81","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'dispatch', 'localStorageId', and 'thermostatId'. Either include them or remove the dependency array.","ArrayExpression",["84"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [dispatch, localStorageId, thermostatId]",{"range":"87","text":"88"},[2782,2784],"[dispatch, localStorageId, thermostatId]"]