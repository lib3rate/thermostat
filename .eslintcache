[{"/home/liberate/projects/thermostat/src/index.js":"1","/home/liberate/projects/thermostat/src/App.js":"2","/home/liberate/projects/thermostat/src/serviceWorker.js":"3","/home/liberate/projects/thermostat/src/app/store.js":"4","/home/liberate/projects/thermostat/src/helpers/helpers.js":"5","/home/liberate/projects/thermostat/src/components/Navigation/Navigation.js":"6","/home/liberate/projects/thermostat/src/components/Navigation/navigationSlice.js":"7","/home/liberate/projects/thermostat/src/components/Navigation/NavigationItem.js":"8","/home/liberate/projects/thermostat/src/components/Buttons/ModeButton.js":"9","/home/liberate/projects/thermostat/src/components/Thermostat/Thermostat.js":"10","/home/liberate/projects/thermostat/src/components/Thermostat/thermostatSlice.js":"11","/home/liberate/projects/thermostat/src/components/Temperature/Temperature.js":"12","/home/liberate/projects/thermostat/src/components/Alert/alertSlice.js":"13","/home/liberate/projects/thermostat/src/components/Alert/Alert.js":"14"},{"size":644,"mtime":1612233743890,"results":"15","hashOfConfig":"16"},{"size":304,"mtime":1612591918420,"results":"17","hashOfConfig":"16"},{"size":5141,"mtime":1612233743890,"results":"18","hashOfConfig":"16"},{"size":420,"mtime":1612591918420,"results":"19","hashOfConfig":"16"},{"size":3410,"mtime":1613447901710,"results":"20","hashOfConfig":"16"},{"size":4468,"mtime":1612591918420,"results":"21","hashOfConfig":"16"},{"size":492,"mtime":1612329872290,"results":"22","hashOfConfig":"16"},{"size":1206,"mtime":1612591918420,"results":"23","hashOfConfig":"16"},{"size":4008,"mtime":1612594564520,"results":"24","hashOfConfig":"16"},{"size":4414,"mtime":1612599950710,"results":"25","hashOfConfig":"16"},{"size":2161,"mtime":1612594564520,"results":"26","hashOfConfig":"16"},{"size":4726,"mtime":1613448047910,"results":"27","hashOfConfig":"16"},{"size":622,"mtime":1612591918420,"results":"28","hashOfConfig":"16"},{"size":971,"mtime":1612591918420,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"20lrqr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/liberate/projects/thermostat/src/index.js",[],["61","62"],"/home/liberate/projects/thermostat/src/App.js",[],"/home/liberate/projects/thermostat/src/serviceWorker.js",[],"/home/liberate/projects/thermostat/src/app/store.js",[],"/home/liberate/projects/thermostat/src/helpers/helpers.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/Navigation.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/navigationSlice.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/NavigationItem.js",["63"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { changeDrawerUnit, selectCurrentUnit } from './navigationSlice';\r\nimport { changeThermostatUnit } from '../Thermostat/thermostatSlice';\r\n\r\nexport default function NavigationItem(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const currentUnit = useSelector(selectCurrentUnit);\r\n\r\n  const changeUnit = unit => {\r\n    dispatch(changeDrawerUnit(unit));\r\n    dispatch(changeThermostatUnit(unit));\r\n  };\r\n\r\n  function checkIfSelected() {\r\n    return props.unit === currentUnit ? true : false;\r\n  }\r\n\r\n  return (\r\n    <ListItem\r\n      button\r\n      onClick={() => changeUnit(props.unit)}\r\n      selected={checkIfSelected()}\r\n    >\r\n      <ListItemText primary={props.unit} />\r\n    </ListItem>\r\n  );\r\n}","/home/liberate/projects/thermostat/src/components/Buttons/ModeButton.js",[],"/home/liberate/projects/thermostat/src/components/Thermostat/Thermostat.js",["64","65"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport store from '../../app/store';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ModeButton from \"../Buttons/ModeButton\";\r\nimport Temperature from \"../Temperature/Temperature\";\r\n\r\nimport {\r\n  registerThermostat,\r\n  setMode,\r\n  setCurrentIndoorTemperature,\r\n  setCurrentOutdoorTemperature,\r\n  setDesiredTemperature,\r\n  selectCurrentUnit,\r\n  selectId,\r\n  selectMode\r\n} from './thermostatSlice';\r\nimport { setAlertOpen, setAlertMessage } from '../Alert/alertSlice';\r\n\r\nimport { register, fetchTemperature, fetchCurrentStatus } from \"../../helpers/helpers\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  unitTitle: {\r\n    color: '#092652',\r\n    fontSize: '1.125rem',\r\n    fontWeight: 700\r\n  },\r\n  modeInterface: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    [theme.breakpoints.up('sm')]: {\r\n      flexDirection: 'row',\r\n      alignItems: 'flex-start'\r\n    },\r\n  },\r\n  modeButtons: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    width: '50%'\r\n  },\r\n}));\r\n\r\nexport default function Thermostat() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const localStorageId = localStorage.getItem('id');\r\n  const thermostatId = useSelector(selectId);\r\n\r\n  useEffect(async () => {\r\n    // Register thermostat if there is no thermostat id stored locally\r\n    if (!localStorageId) {\r\n      const response = await register();\r\n\r\n      if (response.uid_hash) {\r\n        const id = response.uid_hash;\r\n        dispatch(registerThermostat(id));\r\n        localStorage.setItem('id', id);\r\n      } else {\r\n        dispatch(setAlertMessage('Could not register thermostat'));\r\n        dispatch(setAlertOpen(true));\r\n      }\r\n    }\r\n\r\n    // Save the thermostat id in the state if it is stored locally but not in the state\r\n    if (!thermostatId) {\r\n      dispatch(registerThermostat(localStorageId))\r\n    };\r\n\r\n    loadStatus();\r\n\r\n    const averageIndoorTemperature = await fetchTemperature('temperature-1');\r\n\r\n    if (averageIndoorTemperature) {\r\n      dispatch(setCurrentIndoorTemperature(averageIndoorTemperature));\r\n      dispatch(setDesiredTemperature(averageIndoorTemperature));\r\n    } else {\r\n      dispatch(setAlertMessage('Could not receive indoor temperature data'));\r\n      dispatch(setAlertOpen(true));\r\n    }\r\n\r\n    const averageOutdoorTemperature = await fetchTemperature('outdoor-1');\r\n\r\n    if (averageOutdoorTemperature) {\r\n      dispatch(setCurrentOutdoorTemperature(averageOutdoorTemperature));\r\n    } else {\r\n      dispatch(setAlertMessage('Could not receive outdoor temperature data'));\r\n      dispatch(setAlertOpen(true));\r\n    }   \r\n\r\n    // Update the current temperature every 5 minutes\r\n    setInterval(async () => {\r\n      let updatedIndoorTemperature = await fetchTemperature('temperature-1');\r\n      dispatch(setCurrentIndoorTemperature(updatedIndoorTemperature));\r\n    }, 300000);\r\n  }, []);\r\n\r\n  const currentUnit = useSelector(selectCurrentUnit);\r\n  const currentMode = useSelector(selectMode);\r\n\r\n  async function loadStatus() {\r\n    // Get the thermostat id from the store after opening browser as Redux selector still has the old state data with null id\r\n    const updatedId = store.getState().thermostat.id;\r\n    const currentStatus = await fetchCurrentStatus(updatedId);\r\n\r\n    if (currentStatus) {\r\n      const registeredMode = currentStatus.state;\r\n      dispatch(setMode(registeredMode));\r\n    } else {\r\n      dispatch(setAlertMessage('Could not receive current thermostat mode'));\r\n      dispatch(setAlertOpen(true));\r\n    }\r\n  }\r\n\r\n  function isTurnedOff() {\r\n    return currentMode === 'off' ? true : false;\r\n  };\r\n\r\n  const buttons = ['Auto', 'Cooling', 'Heating'];\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <span className={classes.unitTitle}>{currentUnit} - Thermostat</span>\r\n      </div>\r\n      <ModeButton\r\n        text='Turn off'\r\n        isDisabled={isTurnedOff()}\r\n      />\r\n      <div className={classes.modeInterface}>\r\n        <Temperature />\r\n        <div className={classes.modeButtons}>\r\n          Thermostat mode\r\n          {buttons.map(button => (\r\n            <ModeButton\r\n              key={button}\r\n              text={button}\r\n              isDisabled={false}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","/home/liberate/projects/thermostat/src/components/Thermostat/thermostatSlice.js",[],"/home/liberate/projects/thermostat/src/components/Temperature/Temperature.js",[],"/home/liberate/projects/thermostat/src/components/Alert/alertSlice.js",[],"/home/liberate/projects/thermostat/src/components/Alert/Alert.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":5,"column":22,"nodeType":"72","messageId":"73","endLine":5,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":53,"column":13,"nodeType":"76","endLine":99,"endColumn":4},{"ruleId":"74","severity":1,"message":"77","line":99,"column":6,"nodeType":"78","endLine":99,"endColumn":8,"suggestions":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'dispatch', 'loadStatus', 'localStorageId', and 'thermostatId'. Either include them or remove the dependency array.","ArrayExpression",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [dispatch, loadStatus, localStorageId, thermostatId]",{"range":"85","text":"86"},[3021,3023],"[dispatch, loadStatus, localStorageId, thermostatId]"]