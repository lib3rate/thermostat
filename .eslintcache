[{"/home/liberate/projects/thermostat/src/index.js":"1","/home/liberate/projects/thermostat/src/App.js":"2","/home/liberate/projects/thermostat/src/serviceWorker.js":"3","/home/liberate/projects/thermostat/src/app/store.js":"4","/home/liberate/projects/thermostat/src/helpers/helpers.js":"5","/home/liberate/projects/thermostat/src/components/Navigation/Navigation.js":"6","/home/liberate/projects/thermostat/src/components/Navigation/navigationSlice.js":"7","/home/liberate/projects/thermostat/src/components/Navigation/NavigationItem.js":"8","/home/liberate/projects/thermostat/src/components/Buttons/ModeButton.js":"9","/home/liberate/projects/thermostat/src/components/Thermostat/Thermostat.js":"10","/home/liberate/projects/thermostat/src/components/Thermostat/thermostatSlice.js":"11","/home/liberate/projects/thermostat/src/components/Temperature/Temperature.js":"12","/home/liberate/projects/thermostat/src/components/Alert/alertSlice.js":"13","/home/liberate/projects/thermostat/src/components/Alert/Alert.js":"14"},{"size":644,"mtime":1612233743890,"results":"15","hashOfConfig":"16"},{"size":304,"mtime":1612591918420,"results":"17","hashOfConfig":"16"},{"size":5141,"mtime":1612233743890,"results":"18","hashOfConfig":"16"},{"size":420,"mtime":1612591918420,"results":"19","hashOfConfig":"16"},{"size":3429,"mtime":1612592816610,"results":"20","hashOfConfig":"16"},{"size":4468,"mtime":1612591918420,"results":"21","hashOfConfig":"16"},{"size":492,"mtime":1612329872290,"results":"22","hashOfConfig":"16"},{"size":1206,"mtime":1612591918420,"results":"23","hashOfConfig":"16"},{"size":4032,"mtime":1612591918420,"results":"24","hashOfConfig":"16"},{"size":4523,"mtime":1612593839580,"results":"25","hashOfConfig":"16"},{"size":2484,"mtime":1612591918420,"results":"26","hashOfConfig":"16"},{"size":4876,"mtime":1612591918420,"results":"27","hashOfConfig":"16"},{"size":622,"mtime":1612591918420,"results":"28","hashOfConfig":"16"},{"size":971,"mtime":1612591918420,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"20lrqr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/liberate/projects/thermostat/src/index.js",[],["61","62"],"/home/liberate/projects/thermostat/src/App.js",[],"/home/liberate/projects/thermostat/src/serviceWorker.js",[],"/home/liberate/projects/thermostat/src/app/store.js",[],"/home/liberate/projects/thermostat/src/helpers/helpers.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/Navigation.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/navigationSlice.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/NavigationItem.js",["63"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { changeDrawerUnit, selectCurrentUnit } from './navigationSlice';\r\nimport { changeThermostatUnit } from '../Thermostat/thermostatSlice';\r\n\r\nexport default function NavigationItem(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const currentUnit = useSelector(selectCurrentUnit);\r\n\r\n  const changeUnit = unit => {\r\n    dispatch(changeDrawerUnit(unit));\r\n    dispatch(changeThermostatUnit(unit));\r\n  };\r\n\r\n  function checkIfSelected() {\r\n    return props.unit === currentUnit ? true : false;\r\n  }\r\n\r\n  return (\r\n    <ListItem\r\n      button\r\n      onClick={() => changeUnit(props.unit)}\r\n      selected={checkIfSelected()}\r\n    >\r\n      <ListItemText primary={props.unit} />\r\n    </ListItem>\r\n  );\r\n}","/home/liberate/projects/thermostat/src/components/Buttons/ModeButton.js",[],"/home/liberate/projects/thermostat/src/components/Thermostat/Thermostat.js",["64","65"],"/home/liberate/projects/thermostat/src/components/Thermostat/thermostatSlice.js",[],"/home/liberate/projects/thermostat/src/components/Temperature/Temperature.js",["66"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\nimport {\r\n  setMode,\r\n  increaseDesiredTemperature,\r\n  decreaseDesiredTemperature,\r\n  selectId,\r\n  selectMode,\r\n  selectCurrentIndoorTemperature,\r\n  selectCurrentOutdoorTemperature,\r\n  selectDesiredTemperature\r\n} from '../Thermostat/thermostatSlice';\r\nimport { setAlertOpen, setAlertMessage } from '../Alert/alertSlice';\r\n\r\nimport { changeMode } from \"../../helpers/helpers\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  temperatureMain: {\r\n    width: '50%',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  temperatureContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  temperatureDisplay: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  currentTemperature: {\r\n    margin: '1rem',\r\n    fontSize: '4rem'\r\n  },\r\n  desiredTemperature: {\r\n    margin: '1rem',\r\n    fontSize: '2.5rem'\r\n  }\r\n}));\r\n\r\nexport default function Temperature(props) {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const id = useSelector(selectId);\r\n  const currentMode = useSelector(selectMode);\r\n  const currentIndoorTemperature = useSelector(selectCurrentIndoorTemperature);\r\n  const currentOutdoorTemperature = useSelector(selectCurrentOutdoorTemperature);\r\n  const desiredTemperature = useSelector(selectDesiredTemperature);\r\n\r\n  // let mode = null;\r\n\r\n  // useEffect(() => {\r\n  // }, [currentMode, desiredTemperature]);\r\n\r\n  function decreaseTemperature() {\r\n    dispatch(decreaseDesiredTemperature());\r\n    \r\n    // Assign event listener to the button to change the mode only in Auto mode\r\n    if (currentMode.includes('auto')) {\r\n      changeThermostatMode();\r\n    }\r\n  }\r\n\r\n  function increaseTemperature() {\r\n    dispatch(increaseDesiredTemperature());\r\n    \r\n    // Assign event listener to the button to change the mode only in Auto mode\r\n    if (currentMode.includes('auto')) {\r\n      changeThermostatMode();\r\n    }\r\n  }\r\n\r\n  async function changeThermostatMode() {\r\n    let mode = null;\r\n\r\n    console.log(currentIndoorTemperature);\r\n    console.log(desiredTemperature);\r\n\r\n    if (currentIndoorTemperature > desiredTemperature) {\r\n      currentOutdoorTemperature < 0 ? mode = 'auto_standby' : mode = 'auto_cool';\r\n    } else if (currentIndoorTemperature < desiredTemperature) {\r\n      mode = 'auto_heat';\r\n    } else if (currentIndoorTemperature === desiredTemperature) {\r\n      mode = 'auto_standby';\r\n    }\r\n\r\n    console.log(mode);\r\n\r\n    const response = await changeMode(id, mode);\r\n\r\n    // Change mode in the state only if the request to the API succeeded\r\n    if (response.state === mode) {\r\n      dispatch(setMode(mode));\r\n    } else {\r\n      dispatch(setAlertMessage('Could not change thermostat mode'));\r\n      dispatch(setAlertOpen(true));\r\n    }\r\n  };\r\n\r\n  // Assign which auto mode type should be displayed\r\n  function displayAutoType() {\r\n    let type = '';\r\n\r\n    if (currentMode === 'auto_cool') {\r\n      type = 'Cooling';\r\n    } else if (currentMode === 'auto_heat') {\r\n      type = 'Heating';\r\n    } else if (currentMode === 'auto_standby') {\r\n      type = 'Stand-by';\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.temperatureMain}>\r\n      {/* <Thermometer /> */}\r\n      <div className={classes.temperatureContainer}>\r\n        <div className={classes.temperatureDisplay}>\r\n          <span>Current temperature:</span>\r\n          <span className={classes.currentTemperature}>{currentIndoorTemperature}Â°</span>\r\n        </div>\r\n        <div className={classes.temperatureDisplay}>\r\n          <span>Desired temperature:</span>\r\n          <div>\r\n            <Fab\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              aria-label=\"decrease\"\r\n              onClick={decreaseTemperature}\r\n            >\r\n              <RemoveIcon />\r\n            </Fab>\r\n            <span className={classes.desiredTemperature}>{desiredTemperature}Â°</span>\r\n            <Fab\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              aria-label=\"increase\"\r\n              onClick={increaseTemperature}\r\n            >\r\n              <AddIcon />\r\n            </Fab>\r\n          </div>\r\n          <span>{displayAutoType()}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","/home/liberate/projects/thermostat/src/components/Alert/alertSlice.js",[],"/home/liberate/projects/thermostat/src/components/Alert/Alert.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":5,"column":22,"nodeType":"73","messageId":"74","endLine":5,"endColumn":30},{"ruleId":"75","severity":1,"message":"76","line":56,"column":13,"nodeType":"77","endLine":102,"endColumn":4},{"ruleId":"75","severity":1,"message":"78","line":102,"column":6,"nodeType":"79","endLine":102,"endColumn":8,"suggestions":"80"},{"ruleId":"71","severity":1,"message":"81","line":59,"column":9,"nodeType":"73","messageId":"74","endLine":59,"endColumn":34},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'dispatch', 'loadStatus', 'localStorageId', and 'thermostatId'. Either include them or remove the dependency array.","ArrayExpression",["84"],"'currentOutdoorTemperature' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [dispatch, loadStatus, localStorageId, thermostatId]",{"range":"87","text":"88"},[3130,3132],"[dispatch, loadStatus, localStorageId, thermostatId]"]