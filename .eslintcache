[{"/home/liberate/projects/thermostat/src/index.js":"1","/home/liberate/projects/thermostat/src/App.js":"2","/home/liberate/projects/thermostat/src/serviceWorker.js":"3","/home/liberate/projects/thermostat/src/app/store.js":"4","/home/liberate/projects/thermostat/src/helpers/helpers.js":"5","/home/liberate/projects/thermostat/src/components/Navigation/Navigation.js":"6","/home/liberate/projects/thermostat/src/components/Navigation/navigationSlice.js":"7","/home/liberate/projects/thermostat/src/components/Navigation/NavigationItem.js":"8","/home/liberate/projects/thermostat/src/components/Buttons/ModeButton.js":"9","/home/liberate/projects/thermostat/src/components/Thermostat/Thermostat.js":"10","/home/liberate/projects/thermostat/src/components/Thermostat/thermostatSlice.js":"11","/home/liberate/projects/thermostat/src/components/Temperature/Temperature.js":"12","/home/liberate/projects/thermostat/src/components/Alert/Alert.js":"13","/home/liberate/projects/thermostat/src/components/Alert/alertSlice.js":"14"},{"size":644,"mtime":1612233743890,"results":"15","hashOfConfig":"16"},{"size":304,"mtime":1612504438500,"results":"17","hashOfConfig":"16"},{"size":5141,"mtime":1612233743890,"results":"18","hashOfConfig":"16"},{"size":420,"mtime":1612504574780,"results":"19","hashOfConfig":"16"},{"size":2762,"mtime":1612416087250,"results":"20","hashOfConfig":"16"},{"size":3876,"mtime":1612415055300,"results":"21","hashOfConfig":"16"},{"size":492,"mtime":1612329872290,"results":"22","hashOfConfig":"16"},{"size":904,"mtime":1612415055300,"results":"23","hashOfConfig":"16"},{"size":3963,"mtime":1612504819570,"results":"24","hashOfConfig":"16"},{"size":2984,"mtime":1612492964590,"results":"25","hashOfConfig":"16"},{"size":2580,"mtime":1612493338440,"results":"26","hashOfConfig":"16"},{"size":4263,"mtime":1612501329310,"results":"27","hashOfConfig":"16"},{"size":1027,"mtime":1612504702330,"results":"28","hashOfConfig":"16"},{"size":622,"mtime":1612504637880,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"20lrqr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/liberate/projects/thermostat/src/index.js",[],["62","63"],"/home/liberate/projects/thermostat/src/App.js",[],"/home/liberate/projects/thermostat/src/serviceWorker.js",[],"/home/liberate/projects/thermostat/src/app/store.js",[],"/home/liberate/projects/thermostat/src/helpers/helpers.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/Navigation.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/navigationSlice.js",[],"/home/liberate/projects/thermostat/src/components/Navigation/NavigationItem.js",[],"/home/liberate/projects/thermostat/src/components/Buttons/ModeButton.js",[],"/home/liberate/projects/thermostat/src/components/Thermostat/Thermostat.js",["64","65"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ModeButton from \"../Buttons/ModeButton\";\r\nimport Temperature from \"../Temperature/Temperature\";\r\n\r\nimport {\r\n  registerThermostat,\r\n  setCurrentIndoorTemperature,\r\n  setCurrentOutdoorTemperature,\r\n  setDesiredTemperature,\r\n  selectCurrentUnit,\r\n  selectId,\r\n  selectMode,\r\n  // selectCurrentIndoorTemperature,\r\n  // selectCurrentOutdoorTemperature,\r\n  // selectDesiredTemperature\r\n} from './thermostatSlice';\r\n\r\nimport { register, fetchTemperature } from \"../../helpers/helpers\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modeInterface: {\r\n    display: 'flex'\r\n  },\r\n  modeButtons: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    width: '50%'\r\n  },\r\n}));\r\n\r\nexport default function Thermostat() {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const localStorageId = localStorage.getItem('id');\r\n  const thermostatId = useSelector(selectId);\r\n\r\n  useEffect(async () => {\r\n    // Register thermostat if there is no thermostat id stored locally\r\n    if (!localStorageId) {\r\n      const response = await register();\r\n      const id = response.uid_hash;\r\n\r\n      dispatch(registerThermostat(id));\r\n      localStorage.setItem('id', id);\r\n    }\r\n\r\n    // Save the thermostat id in the state if it is stored locally but not in the state\r\n    if (!thermostatId) {\r\n      dispatch(registerThermostat(localStorageId))\r\n    };\r\n\r\n    const averageIndoorTemperature = await fetchTemperature('temperature-1');\r\n    dispatch(setCurrentIndoorTemperature(averageIndoorTemperature));\r\n    dispatch(setDesiredTemperature(averageIndoorTemperature));\r\n\r\n    const averageOutdoorTemperature = await fetchTemperature('outdoor-1');\r\n    dispatch(setCurrentOutdoorTemperature(averageOutdoorTemperature));\r\n\r\n    // Update the current temperature every 5 minutes\r\n    setInterval(async () => {\r\n      let updatedIndoorTemperature = await fetchTemperature('temperature-1');\r\n      dispatch(setCurrentIndoorTemperature(updatedIndoorTemperature));\r\n    }, 300000);\r\n  }, []);\r\n\r\n  const currentUnit = useSelector(selectCurrentUnit);\r\n  const currentMode = useSelector(selectMode);\r\n\r\n  function isTurnedOff() {\r\n    return currentMode === 'off' ? true : false;\r\n  };\r\n\r\n  const buttons = ['Auto', 'Cooling', 'Heating'];\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {currentUnit} - Thermostat\r\n      </div>\r\n      <ModeButton\r\n        text='Turn off'\r\n        isDisabled={isTurnedOff()}\r\n      />\r\n      <div className={classes.modeInterface}>\r\n        <Temperature />\r\n        <div className={classes.modeButtons}>\r\n          Thermostat mode\r\n          {buttons.map(button => (\r\n            <ModeButton\r\n              key={button}\r\n              text={button}\r\n              isDisabled={false}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","/home/liberate/projects/thermostat/src/components/Thermostat/thermostatSlice.js",["66","67"],"import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const thermostatSlice = createSlice({\r\n  name: 'thermostat',\r\n  initialState: {\r\n    id: '',\r\n    currentUnit: 'Unit 100',\r\n    mode: 'off',\r\n    currentIndoorTemperature: null,\r\n    currentOutdoorTemperature: null,\r\n    desiredTemperature: null,\r\n  },\r\n  reducers: {\r\n    registerThermostat: (state, action) => {\r\n      state.id = action.payload;\r\n    },\r\n    changeThermostatUnit: (state, action) => {\r\n      state.currentUnit = action.payload;\r\n    },\r\n    setMode: (state, action) => {\r\n      state.mode = action.payload;\r\n    },\r\n    setCurrentIndoorTemperature: (state, action) => {\r\n      state.currentIndoorTemperature = action.payload;\r\n    },\r\n    setCurrentOutdoorTemperature: (state, action) => {\r\n      state.currentOutdoorTemperature = action.payload;\r\n    },\r\n    setDesiredTemperature: (state, action) => {\r\n      state.desiredTemperature = action.payload;\r\n    },\r\n    increaseDesiredTemperature: state => {\r\n      state.desiredTemperature\r\n        ? state.desiredTemperature = state.desiredTemperature\r\n        : state.desiredTemperature = state.currentIndoorTemperature;\r\n\r\n      state.desiredTemperature += 1;\r\n    },\r\n    decreaseDesiredTemperature: state => {\r\n      state.desiredTemperature\r\n        ? state.desiredTemperature = state.desiredTemperature\r\n        : state.desiredTemperature = state.currentIndoorTemperature;\r\n\r\n      state.desiredTemperature -= 1;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  registerThermostat,\r\n  changeThermostatUnit,\r\n  setMode,\r\n  setCurrentIndoorTemperature,\r\n  setCurrentOutdoorTemperature,\r\n  setDesiredTemperature,\r\n  increaseDesiredTemperature,\r\n  decreaseDesiredTemperature\r\n} = thermostatSlice.actions;\r\n\r\n// Asynchronous state mutations\r\n// export const setReceivedIndoorTemperature = temperature => dispatch => {\r\n//   dispatch(setCurrentIndoorTemperature(temperature));\r\n// };\r\n\r\n// export const setReceivedOutdoorTemperature = temperature => dispatch => {\r\n//   dispatch(setCurrentOutdoorTemperature(temperature));\r\n// };\r\n\r\n// Selectors\r\nexport const selectId = state => state.thermostat.id;\r\nexport const selectCurrentUnit = state => state.thermostat.currentUnit;\r\nexport const selectMode = state => state.thermostat.mode;\r\nexport const selectCurrentIndoorTemperature = state => state.thermostat.currentIndoorTemperature;\r\nexport const selectCurrentOutdoorTemperature = state => state.thermostat.currentOutdoorTemperature;\r\nexport const selectDesiredTemperature = state => state.thermostat.desiredTemperature;\r\n\r\nexport default thermostatSlice.reducer;\r\n","/home/liberate/projects/thermostat/src/components/Temperature/Temperature.js",["68"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\nimport {\r\n  setMode,\r\n  increaseDesiredTemperature,\r\n  decreaseDesiredTemperature,\r\n  selectId,\r\n  selectMode,\r\n  selectCurrentIndoorTemperature,\r\n  selectDesiredTemperature\r\n} from '../Thermostat/thermostatSlice';\r\n\r\nimport { changeMode } from \"../../helpers/helpers\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  temperatureMain: {\r\n    width: '50%',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  temperatureContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  temperatureDisplay: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  currentTemperature: {\r\n    margin: '1rem',\r\n    fontSize: '4rem'\r\n  },\r\n  desiredTemperature: {\r\n    margin: '1rem',\r\n    fontSize: '2.5rem'\r\n  }\r\n}));\r\n\r\nexport default function Temperature(props) {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const id = useSelector(selectId);\r\n  const currentMode = useSelector(selectMode);\r\n  const currentIndoorTemperature = useSelector(selectCurrentIndoorTemperature);\r\n  const desiredTemperature = useSelector(selectDesiredTemperature);\r\n\r\n  // let mode = null;\r\n\r\n  // useEffect(() => {\r\n  //   mode = assignAutoMode();\r\n  // }, [currentMode, desiredTemperature]);\r\n\r\n  function assignAutoMode() {\r\n    let result = null;\r\n\r\n    if (currentIndoorTemperature > desiredTemperature) {\r\n      result = 'auto_cool';\r\n    } else if (currentIndoorTemperature < desiredTemperature) {\r\n      result = 'auto_heat';\r\n    } else if (currentIndoorTemperature === desiredTemperature) {\r\n      result = 'auto_standby';\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  function decreaseTemperature() {\r\n    // Assign event listener to the button to change the mode only in Auto mode\r\n    if (currentMode.includes('auto')) {\r\n      changeThermostatMode();\r\n    }\r\n    dispatch(decreaseDesiredTemperature());\r\n  }\r\n\r\n  function increaseTemperature() {\r\n    // Assign event listener to the button to change the mode only in Auto mode\r\n    if (currentMode.includes('auto')) {\r\n      changeThermostatMode();\r\n    }\r\n    dispatch(increaseDesiredTemperature());\r\n  }\r\n\r\n  async function changeThermostatMode() {\r\n    const mode = assignAutoMode();\r\n    console.log(mode);\r\n\r\n    const response = await changeMode(id, mode);\r\n\r\n    // Change mode in the state only if the request to the API succeeded\r\n    if (response.state === mode) {\r\n      dispatch(setMode(mode));\r\n    } else {\r\n      alert('Could not change thermostat mode');\r\n    }\r\n  };\r\n\r\n  // Assign which auto mode type should be displayed\r\n  function displayAutoType() {\r\n    let type = '';\r\n\r\n    if (currentMode === 'auto_cool') {\r\n      type = 'Cooling';\r\n    } else if (currentMode === 'auto_heat') {\r\n      type = 'Heating';\r\n    } else if (currentMode === 'auto_standby') {\r\n      type = 'Stand-by';\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.temperatureMain}>\r\n      {/* <Thermometer /> */}\r\n      <div className={classes.temperatureContainer}>\r\n        <div className={classes.temperatureDisplay}>\r\n          <span>Current temperature:</span>\r\n          <span className={classes.currentTemperature}>{currentIndoorTemperature}°</span>\r\n        </div>\r\n        <div className={classes.temperatureDisplay}>\r\n          <span>Desired temperature:</span>\r\n          <div>\r\n            <Fab\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              aria-label=\"decrease\"\r\n              onClick={decreaseTemperature}\r\n            >\r\n              <RemoveIcon />\r\n            </Fab>\r\n            <span className={classes.desiredTemperature}>{desiredTemperature}°</span>\r\n            <Fab\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              aria-label=\"increase\"\r\n              onClick={increaseTemperature}\r\n            >\r\n              <AddIcon />\r\n            </Fab>\r\n          </div>\r\n          <span>{displayAutoType()}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","/home/liberate/projects/thermostat/src/components/Alert/Alert.js",[],"/home/liberate/projects/thermostat/src/components/Alert/alertSlice.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":42,"column":13,"nodeType":"75","endLine":69,"endColumn":4},{"ruleId":"73","severity":1,"message":"76","line":69,"column":6,"nodeType":"77","endLine":69,"endColumn":8,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":34,"column":38,"nodeType":"81","messageId":"82","endLine":34,"endColumn":62},{"ruleId":"79","severity":1,"message":"80","line":41,"column":38,"nodeType":"81","messageId":"82","endLine":41,"endColumn":62},{"ruleId":"83","severity":1,"message":"84","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":26},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'dispatch', 'localStorageId', and 'thermostatId'. Either include them or remove the dependency array.","ArrayExpression",["89"],"no-self-assign","'state.desiredTemperature' is assigned to itself.","MemberExpression","selfAssignment","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [dispatch, localStorageId, thermostatId]",{"range":"92","text":"93"},[2178,2180],"[dispatch, localStorageId, thermostatId]"]